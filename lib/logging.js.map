{"version":3,"sources":["lib/logging.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AACb,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;AAC9D,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACjC,MAAM,OAAO,GAAG;IACZ,GAAG,EAAE,aAAa;IAClB,GAAG,EAAE,aAAa;IAClB,UAAU,EAAE,IAAI;IAChB,gBAAgB,EAAE,IAAI;CACzB,CAAC;AACF,MAAM,aAAa,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;AACrF,MAAM,UAAU,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;AAElD;IAEI;;;;OAIG;IACH;IACA,CAAC;IAEM,IAAI,CAAC,MAAW,EAAE,aAAqB;QAC1C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC,CAAA;QAC5E,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,EAAE,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC;QACtG,EAAE,CAAC,CAAC,aAAa,IAAI,YAAY,CAAC,CAAC,CAAC;YAChC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAA;QACpC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,OAAY;QACrB,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IACM,IAAI,CAAC,OAAY;QACpB,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC;IACM,IAAI,CAAC,OAAY;QACpB,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;QACvB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACjC,CAAC;IACM,OAAO,CAAC,OAAY;QACvB,OAAO,CAAC,KAAK,GAAG,SAAS,CAAC;QAC1B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IACpC,CAAC;IACM,KAAK,CAAC,OAAY;QACrB,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;IACM,KAAK,CAAC,OAAY;QACrB,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IAClC,CAAC;CAEJ;AAEU,QAAA,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC","file":"logging.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst winston = require(\"winston\");\nconst logdna = require(\"logdna\");\nconst options = {\n    app: \"default-app\",\n    env: \"default-env\",\n    index_meta: true,\n    handleExceptions: true,\n};\nconst defaultLevels = { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 };\nconst prodLevels = { error: 0, warn: 1, info: 2 };\n\nclass Logging {\n\n    /**\n     * constructor. Create and configure logging params\n     *\n     * @constructor\n     */\n    constructor() {\n    }\n\n    public init(config: any, environnement: string) {\n        console.log(Object.assign({}, options, config, { hostname: environnement }))\n        winston.add(logdna.WinstonTransport, Object.assign({}, options, config, { hostname: environnement }));\n        if (environnement == \"production\") {\n            winston.setLevels(prodLevels)\n        } else {\n            winston.setLevels(defaultLevels)\n        }\n    }\n\n    public error(message: any) {\n        winston.level = 'error';\n        winston.log('error', message);\n    }\n    public warn(message: any) {\n        winston.level = 'warn';\n        winston.log('warn', message);\n    }\n    public info(message: any) {\n        winston.level = 'info';\n        winston.log('info', message);\n    }\n    public verbose(message: any) {\n        winston.level = 'verbose';\n        winston.log('verbose', message);\n    }\n    public debug(message: any) {\n        winston.level = 'debug';\n        winston.log('debug', message);\n    }\n    public silly(message: any) {\n        winston.level = 'silly';\n        winston.log('silly', message);\n    }\n\n}\n\nexport let logging = new Logging();\n"]}